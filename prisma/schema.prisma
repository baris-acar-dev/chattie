// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations   Conversation[]
  folders         Folder[]
  sessions        Session[]
  accounts        Account[]
  preferences     UserPreferences?
  promptTemplates PromptTemplate[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  folderId  String?  // Add folder relationship
  model     String   @default("llama2")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder    Folder?                @relation(fields: [folderId], references: [id], onDelete: SetNull)
  messages  Message[]
  templates ConversationTemplate[]

  @@map("conversations")
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  userId    String
  color     String?  // For UI customization (e.g., 'blue', 'green', 'red')
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]

  @@unique([userId, name]) // Prevent duplicate folder names per user
  @@map("folders")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  role           String // 'user' or 'assistant'
  content        String   @db.Text
  metadata       Json?    // Store additional data like model info, web scraping results, etc.
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model WebCache {
  id        String   @id @default(cuid())
  url       String   @unique
  content   String   @db.Text
  title     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("web_cache")
}

model Document {
  id              String   @id @default(cuid())
  title           String
  content         String   @db.Text
  source          String
  contentHash     String   @unique
  metadata        Json?    // General metadata
  structuredData  Json?    // Extracted structured data (tables, figures, dates, etc.)
  documentType    String?  // pdf, docx, xlsx, etc.
  extractionModel String?  // Model used for structured extraction
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  chunks DocumentChunk[]

  @@map("documents")
}

model DocumentChunk {
  id               String   @id @default(cuid())
  documentId       String
  content          String   @db.Text
  metadata         Json?    // Original metadata
  structuredData   Json?    // Chunk-level structured data
  embedding        Float[]  // For vector embeddings (when using vector databases)
  semanticScore    Float?   // Cross-encoder semantic relevance score
  relevanceGrade   String?  // LLM-based relevance grade: relevant, partially_relevant, irrelevant
  extractedEntities Json?   // Named entities, dates, numbers extracted from chunk
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_chunks")
}

model UserPreferences {
  id             String  @id @default(cuid())
  userId         String  @unique
  geminiApiKey   String? // Encrypted API key for Google Gemini
  openaiApiKey   String? // Encrypted API key for OpenAI
  defaultModel   String? // User's preferred default model
  temperature    Float?  // Default temperature setting
  maxTokens      Int?    // Default max tokens setting
  theme          String? // UI theme preference
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PromptTemplate {
  id             String   @id @default(cuid())
  userId         String
  name           String
  description    String?
  role           String   @db.Text // The system role/persona (e.g., "You are a helpful assistant")
  inputFormat    String?  @db.Text // Instructions for expected input format
  outputFormat   String?  @db.Text // Instructions for desired output format
  examples       Json?    // Array of example conversations
  tags           String[] // Tags for categorization (e.g., ["assistant", "creative", "business"])
  isDefault      Boolean  @default(false) // Whether this is a built-in template
  isPublic       Boolean  @default(false) // Whether other users can see this template
  isActive       Boolean  @default(true)  // Whether template is currently active
  usageCount     Int      @default(0)     // Track how often it's used
  temperature    Float?   // Preferred temperature for this template
  maxTokens      Int?     // Preferred max tokens for this template
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations ConversationTemplate[]

  @@map("prompt_templates")
}

model ConversationTemplate {
  id               String   @id @default(cuid())
  conversationId   String
  promptTemplateId String
  createdAt        DateTime @default(now())

  conversation    Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  promptTemplate  PromptTemplate @relation(fields: [promptTemplateId], references: [id], onDelete: Cascade)

  @@unique([conversationId, promptTemplateId])
  @@map("conversation_templates")
}
